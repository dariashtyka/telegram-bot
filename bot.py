import csv
import os
import sqlite3
import gspread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
from google.oauth2.service_account import Credentials
import json

# –û—Ç—Ä–∏–º–∞—î–º–æ JSON –∑ env
creds_json = os.getenv("GOOGLE_CREDS_JSON")

# –°—Ç–≤–æ—Ä–∏–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
with open("creds.json", "w") as f:
    f.write(creds_json)

# –í–∫–∞–∂–∏ –æ–±—Å—è–≥ –¥–æ—Å—Ç—É–ø—É
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

# –ü—É—Ç—å –¥–æ JSON-—Ñ–∞–π–ª—É –∑ –∫–ª—é—á–µ–º
creds = Credentials.from_service_account_file("creds.json", scopes=SCOPES)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ gspread
gc = gspread.authorize(creds)

# –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–∞–±–ª–∏—Ü—ñ –∑–∞ –Ω–∞–∑–≤–æ—é
sheet = gc.open_by_key("1EQq7u8BaqboIdgS7E5c0vj0fLQLO-UtbPpdESF9ojyY").sheet1

NAME, CONTACT, COMMENT = range(3)

# –°—Ç–∞–¥—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É
Q1, Q2, Q3 = range(3)
T1_Q1, T1_Q2, T1_Q3, T1_Q4, T1_Q5 = range (5)

TOKEN = os.getenv("TOKEN")


# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Å–ª–æ–≤–Ω–∏–∫—É (—É context.user_data)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üôå –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –º–∏—Å–ª–∏—Ü—è!\n\n" \
        "–ó–º—ñ–Ω—ñ–º–æ —Ü–µ–π —Å–≤—ñ—Ç –Ω–∞ –∫—Ä–∞—â–µ, —Ä–æ–∑–≤–∏–≤–∞—é—á–∏ –∫—Ä–∏—Ç–∏—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è.\n\n" \
        "üíô –ù–∞–ø–∏—à–∏ /critical, —â–æ–± –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è.\n\n" \
        "üíô –ù–∞–ø–∏—à–∏ /apply, —â–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É."
    )

# --- –û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏ ---
async def apply_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:")
    return NAME

async def apply_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ email):")
    return CONTACT

async def apply_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['contact'] = update.message.text
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
    return COMMENT

async def apply_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['comment'] = update.message.text

    # –ó–∞–ø–∏—Å—É—î–º–æ —É CSV —Ñ–∞–π–ª
    # with open("zayavky.csv", "a", newline="", encoding="utf-8") as f:
    #     writer = csv.writer(f)
    #     writer.writerow([
    #         update.effective_user.id,
    #         context.user_data['name'],
    #         context.user_data['contact'],
    #         context.user_data['comment']
    #     ])
    # –ó–∞–ø–∏—Å—É—î–º–æ —É Google —Ç–∞–±–ª–∏—Ü—é
    sheet.append_row([
        str(update.effective_user.id),
        context.user_data['name'],
        context.user_data['contact'],
        context.user_data['comment']
    ])

    await update.message.reply_text("–î—è–∫—É—î–º–æ! –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ ‚úÖ")
    return ConversationHandler.END

async def apply_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
    return ConversationHandler.END

# --- –û–±—Ä–æ–±–∫–∞ —Ç–µ—Å—Ç—É ---
async def test_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ù—ñ", callback_data="q1_Ni"), InlineKeyboardButton("–¢–∞–∫", callback_data="q1_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü–∏—Ç–∞–Ω–Ω—è 1: –ß–∏ –º–æ–∂–Ω–∞ –≤–≤–∞–∂–∞—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ó–ú–Ü –æ–±'—î–∫—Ç–∏–≤–Ω–∏–º–∏ —Ç–∞ –¥–æ—Å—Ç–æ–≤—ñ—Ä–Ω–∏–º–∏?",
        reply_markup=reply_markup
    )
    return Q1

async def test_q1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q1'] = query.data.split('_')[1]  # –û—Ç—Ä–∏–º–∞—î–º–æ "Tak" —á–∏ "Ni"

    keyboard = [
        [InlineKeyboardButton("–ù—ñ", callback_data="q2_Ni"), InlineKeyboardButton("–¢–∞–∫", callback_data="q2_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "–ü–∏—Ç–∞–Ω–Ω—è 2: –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –∫—ñ–ª—å–∫–æ—Ö –¥–∂–µ—Ä–µ–ª, —â–æ–± —Å–∫–ª–∞—Å—Ç–∏ –ø–æ–≤–Ω—É –∫–∞—Ä—Ç–∏–Ω—É?",
        reply_markup=reply_markup
    )
    return Q2

async def test_q2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q2'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–ù—ñ", callback_data="q3_Ni"), InlineKeyboardButton("–¢–∞–∫", callback_data="q3_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "–ü–∏—Ç–∞–Ω–Ω—è 3: –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω—ñ —Ç–æ—á–∫–∏ –∑–æ—Ä—É –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó?",
        reply_markup=reply_markup
    )
    return Q3

async def test_q3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q3'] = query.data.split('_')[1]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–ø—Ä–∏–∫–ª–∞–¥)
    correct_answers = {'q1': 'Ni', 'q2': 'Tak', 'q3': 'Tak'}
    results = []
    for q in ['q1', 'q2', 'q3']:
        user_answer = context.user_data.get(q)
        correct = "‚úÖ" if user_answer == correct_answers[q] else "‚ùå"
        results.append(f"{q.upper()}: {user_answer} {correct}")

    await query.message.reply_text(
        "–î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!\n" + "\n".join(results)
    )
    return ConversationHandler.END

async def test_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ—Å—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# --- –û–±—Ä–æ–±–∫–∞ —Ç–µ—Å—Ç—É 1 ---
async def critical_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–§–µ–π–∫", callback_data="q1_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q1_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üîµ –í–∏–∑–Ω–∞—á: ¬´–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ñ–∞–∫—Ç —î —Ñ–µ–π–∫–æ–º —á–∏ –ø—Ä–∞–≤–¥–æ—é?¬ª",
    )
    await update.message.reply_text(
        "1. –ö—Ä–∏—Ç–∏—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è –¥–æ–ø–æ–º–∞–≥–∞—î —Ä–æ–∑—Ä—ñ–∑–Ω—è—Ç–∏ —Ñ–∞–∫—Ç–∏ —ñ –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è.",
        reply_markup=reply_markup
    )
    return T1_Q1

async def critical_q2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q1'] = query.data.split('_')[1]  # –û—Ç—Ä–∏–º–∞—î–º–æ "Tak" —á–∏ "Ni"

    keyboard = [
        [InlineKeyboardButton("–§–µ–π–∫", callback_data="q2_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q2_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "2. –ö—Ä–∏—Ç–∏—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è ‚Äî —Ü–µ –ø–æ—Å—Ç—ñ–π–Ω–∞ –Ω–µ–¥–æ–≤—ñ—Ä–∞ –¥–æ –≤—Å—ñ—Ö —ñ –≤—Å—å–æ–≥–æ.",
        reply_markup=reply_markup
    )
    return T1_Q2

async def critical_q3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q2'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–§–µ–π–∫", callback_data="q3_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q3_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "3. –õ—é–¥–∏–Ω–∞ –∑ –∫—Ä–∏—Ç–∏—á–Ω–∏–º –º–∏—Å–ª–µ–Ω–Ω—è–º –Ω—ñ–∫–æ–ª–∏ –Ω–µ –ø–æ–≥–æ–¥–∂—É—î—Ç—å—Å—è –∑ –¥—É–º–∫–æ—é —ñ–Ω—à–∏—Ö.",
        reply_markup=reply_markup
    )
    return T1_Q3

async def critical_q4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q3'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–§–µ–π–∫", callback_data="q4_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q4_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "4. –ö—Ä–∏—Ç–∏—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è ‚Äî —Ü–µ –Ω–∞–≤–∏—á–∫–∞, —è–∫—É –º–æ–∂–Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ —ñ –≤–¥–æ—Å–∫–æ–Ω–∞–ª—é–≤–∞—Ç–∏.",
        reply_markup=reply_markup
    )
    return T1_Q4

async def critical_q5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q4'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–§–µ–π–∫", callback_data="q5_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q5_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "5. –ö—Ä–∏—Ç–∏—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è –ø–æ–ª—è–≥–∞—î –ª–∏—à–µ –≤ —Ç–æ–º—É, —â–æ–± –∑–Ω–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ñ–∞–∫—Ç—ñ–≤..",
        reply_markup=reply_markup
    )
    return T1_Q5

async def critical_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query=update.callback_query
    await query.answer()
    context.user_data['q5']=query.data.split('_')[1]

    correct_answers={
        'q1':'Tak',
        'q2':'Ni',
        'q3':'Ni',
        'q4':'Tak',
        'q5':'Ni'
    }

    correct_answer_print={
        'Tak':'–ü—Ä–∞–≤–¥–∞',
        'Ni':'–§–µ–π–∫'
    }
    l=len(context.user_data)
    result=[]
    score=0
    for q in [f'q{i}'for i in range(1,l+1) ]:
        u_ans=context.user_data[q]
        c_ans=correct_answers[q]
        if u_ans==c_ans:
            correct="‚úÖ"
            score+=1
        else:
            correct="‚ùå"
        result.append(q.upper()+":"+correct+"\n"+
                      f'üîπ –¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer_print[u_ans]}\n'+
                      f'‚ñ´Ô∏è –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer_print[c_ans]}\n')
    await query.message.reply_text(
        "–î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!\n"+f'–û—Å—å —Ç–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: {score}/{l}\n\n'+'\n'.join(result)
    )
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ–π–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞—è–≤–∫–∏
    apply_conv = ConversationHandler(
        entry_points=[CommandHandler('apply', apply_start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, apply_name)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, apply_contact)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, apply_comment)],
        },
        fallbacks=[CommandHandler('cancel', apply_cancel)]
    )

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ–π–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç—É
    test_conv = ConversationHandler(
        entry_points=[CommandHandler('test', test_start)],
        states={
            Q1: [CallbackQueryHandler(test_q1, pattern='^q1_')],
            Q2: [CallbackQueryHandler(test_q2, pattern='^q2_')],
            Q3: [CallbackQueryHandler(test_q3, pattern='^q3_')],
        },
        fallbacks=[CommandHandler('cancel', test_cancel)]
    )
        # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ–π–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç—É
    critical_conv = ConversationHandler(
        entry_points=[CommandHandler('critical', critical_start)],
        states={
            T1_Q1: [CallbackQueryHandler(critical_q2, pattern='^q1_')],
            T1_Q2: [CallbackQueryHandler(critical_q3, pattern='^q2_')],
            T1_Q3: [CallbackQueryHandler(critical_q4, pattern='^q3_')],
            T1_Q4: [CallbackQueryHandler(critical_q5, pattern='^q4_')],
            T1_Q5: [CallbackQueryHandler(critical_end, pattern='^q5_')],
        },
        fallbacks=[CommandHandler('cancel', test_cancel)]
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(apply_conv)
    app.add_handler(test_conv)
    app.add_handler(critical_conv)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
