import csv
import os
import gspread
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from google.oauth2.service_account import Credentials

# –í–∫–∞–∂–∏ –æ–±—Å—è–≥ –¥–æ—Å—Ç—É–ø—É
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

# –ü—É—Ç—å –¥–æ JSON-—Ñ–∞–π–ª—É –∑ –∫–ª—é—á–µ–º
creds = Credentials.from_service_account_file("creds.json", scopes=SCOPES)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ gspread
gc = gspread.authorize(creds)

# –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–∞–±–ª–∏—Ü—ñ –∑–∞ –Ω–∞–∑–≤–æ—é
sheet = gc.open_by_key("1EQq7u8BaqboIdgS7E5c0vj0fLQLO-UtbPpdESF9ojyY").sheet1

NAME, CONTACT, COMMENT = range(3)

# –°—Ç–∞–¥—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É
Q1, Q2, Q3 = range(3)

TOKEN = os.getenv("TOKEN")


# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Å–ª–æ–≤–Ω–∏–∫—É (—É context.user_data)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üôå –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –º–∏—Å–ª–∏—Ü—è!\n\n" \
        "–ó–º—ñ–Ω—ñ–º–æ —Ü–µ–π —Å–≤—ñ—Ç –Ω–∞ –∫—Ä–∞—â–µ, —Ä–æ–∑–≤–∏–≤–∞—é—á–∏ –∫—Ä–∏—Ç–∏—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è. " \
        "\n\nüå∏ –ù–∞–ø–∏—à–∏ /test, —â–æ–± –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Ç–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å–µ–±–µ —É –∞–Ω–∞–ª—ñ–∑—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.\n\nüå∏ –ù–∞–ø–∏—à–∏ /apply, —â–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É."
    )

# --- –û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏ ---
async def apply_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:")
    return NAME

async def apply_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ email):")
    return CONTACT

async def apply_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['contact'] = update.message.text
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
    return COMMENT

async def apply_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['comment'] = update.message.text

    # –ó–∞–ø–∏—Å—É—î–º–æ —É CSV —Ñ–∞–π–ª
    # with open("zayavky.csv", "a", newline="", encoding="utf-8") as f:
    #     writer = csv.writer(f)
    #     writer.writerow([
    #         update.effective_user.id,
    #         context.user_data['name'],
    #         context.user_data['contact'],
    #         context.user_data['comment']
    #     ])
    # –ó–∞–ø–∏—Å—É—î–º–æ —É Google —Ç–∞–±–ª–∏—Ü—é
    sheet.append_row([
        str(update.effective_user.id),
        context.user_data['name'],
        context.user_data['contact'],
        context.user_data['comment']
    ])

    await update.message.reply_text("–î—è–∫—É—î–º–æ! –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ ‚úÖ")
    return ConversationHandler.END

async def apply_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
    return ConversationHandler.END

# --- –û–±—Ä–æ–±–∫–∞ —Ç–µ—Å—Ç—É ---
async def test_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–∏—Ç–∞–Ω–Ω—è 1: –ß–∏ –º–æ–∂–Ω–∞ –≤–≤–∞–∂–∞—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ó–ú–Ü –æ–±'—î–∫—Ç–∏–≤–Ω–∏–º–∏ —Ç–∞ –¥–æ—Å—Ç–æ–≤—ñ—Ä–Ω–∏–º–∏?\n‚Äì –ù—ñ.\n‚Äì –¢–∞–∫.")
    return Q1

async def test_q1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['q1'] = update.message.text
    await update.message.reply_text("–ü–∏—Ç–∞–Ω–Ω—è 2: –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –∫—ñ–ª—å–∫–æ—Ö –¥–∂–µ—Ä–µ–ª, —â–æ–± —Å–∫–ª–∞—Å—Ç–∏ –ø–æ–≤–Ω—É –∫–∞—Ä—Ç–∏–Ω—É?\n‚Äì –ù—ñ.\n‚Äì –¢–∞–∫.")
    return Q2

async def test_q2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['q2'] = update.message.text
    await update.message.reply_text("–ü–∏—Ç–∞–Ω–Ω—è 3: –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω—ñ —Ç–æ—á–∫–∏ –∑–æ—Ä—É –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó?\n‚Äì –ù—ñ.\n‚Äì –¢–∞–∫.")
    return Q3

async def test_q3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['q3'] = update.message.text

    # –¢—É—Ç –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, –∞ –ø–æ–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø—ñ–¥—Å—É–º–æ–∫:
    await update.message.reply_text(
        f"–î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ! –¢–∏ –≤—ñ–¥–ø–æ–≤—ñ–≤:\n1) {context.user_data['q1']}\n ‚ö™Ô∏è –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: –ù—ñ‚ùå\n2) {context.user_data['q2']} \n ‚ö™Ô∏è –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: –¢–∞–∫‚úÖ\n3) {context.user_data['q2']}\n ‚ö™Ô∏è –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: –¢–∞–∫‚úÖ"
    )
    return ConversationHandler.END

async def test_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ—Å—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ–π–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞—è–≤–∫–∏
    apply_conv = ConversationHandler(
        entry_points=[CommandHandler('apply', apply_start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, apply_name)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, apply_contact)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, apply_comment)],
        },
        fallbacks=[CommandHandler('cancel', apply_cancel)]
    )

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ–π–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç—É
    test_conv = ConversationHandler(
        entry_points=[CommandHandler('test', test_start)],
        states={
            Q1: [MessageHandler(filters.TEXT & ~filters.COMMAND, test_q1)],
            Q2: [MessageHandler(filters.TEXT & ~filters.COMMAND, test_q2)],
            Q3: [MessageHandler(filters.TEXT & ~filters.COMMAND, test_q3)],
        },
        fallbacks=[CommandHandler('cancel', test_cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(apply_conv)
    app.add_handler(test_conv)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
